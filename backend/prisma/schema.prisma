// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  in_stock
  out_of_stock
}

enum OrderStatus {
  in_cart
  pending
  shipped
  delivered
  canceled
  refunded
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  password  String?  @db.VarChar(255)
  google_id String?  @unique
  isAdmin   Boolean  @default(false)
  profile   Profile?
  createdAt DateTime @default(now())
}

model Profile {
  id          String   @id @default(uuid())
  family_name String   @db.VarChar(35)
  given_name  String   @db.VarChar(35)
  nickname    String?  @db.VarChar(35)
  phone       String   @db.VarChar(10)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart        Cart?
  orders      Order[]
  Review      Review[]
  user_id     String   @unique
  created_at  DateTime @default(now())
}

model Cart {
  id       Int       @id @default(autoincrement())
  products Product[]
  profile  Profile   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String    @unique
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  base_price    Decimal       @db.Decimal(10, 2)
  selling_price Decimal       @db.Decimal(10, 2)
  description   String?       @db.VarChar(500)
  stock         Int
  status        ProductStatus @default(in_stock)
  images        Image[]
  ordered_in    Order[]
  category      Category      @relation(fields: [categorie_id], references: [id], onDelete: Cascade)
  Review        Review[]
  Cart          Cart[]
  Supplier      Supplier?     @relation(fields: [supplier_id], references: [id], onDelete: SetNull)
  categorie_id  Int
  supplier_id   String?
  created_at    DateTime      @default(now())
}

model Image {
  id          Int     @id @default(autoincrement())
  display_url String  @db.VarChar(255)
  bucket_url  String  @db.VarChar(255)
  product     Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
}

model Order {
  id               Int         @id @default(autoincrement())
  total_price      Decimal     @default(0) @db.Decimal(10, 2)
  paid             Boolean     @default(false)
  quantity         Int
  status           OrderStatus @default(in_cart)
  shipping_address String      @db.VarChar(300)
  product          Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  profile          Profile     @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  product_id       Int
  profile_id       String
  created_at       DateTime    @default(now())
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(125)
  products Product[]
}

model Supplier {
  id       String    @id @default(uuid())
  name     String    @db.VarChar(255)
  phone    String    @db.VarChar(10)
  email    String    @db.VarChar(255)
  products Product[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int      @db.Int
  title      String   @db.VarChar(255)
  content    String   @db.VarChar(500)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  profile    Profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  product_id Int
  profile_id String
  created_at DateTime @default(now())
}
